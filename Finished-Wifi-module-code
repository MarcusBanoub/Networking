/*
 *  This sketch demonstrates how to set up a simple HTTP-like server.
 *  The server will set a GPIO pin depending on the request
 *    http://server_ip/gpio/0 will set the GPIO2 low,
 *    http://server_ip/gpio/1 will set the GPIO2 high
 *  server_ip is the IP address of the ESP8266 module, will be 
 *  printed to Serial when the module is connected.
 */

#include <ESP8266WiFi.h>
#include <string>
#include <string.h>
//#include <stdio.h>
const char* ssid = "PeaceisAwesome";
const char* password = "32439344";
const char* host = "api.pushingbox.com";
const char* devid = "vD71FF0DF2BF5426";
// Create an instance of the server
// specify the port to listen on as an argument
WiFiServer server(80);
void setup() {
  Serial.begin(115200);
  delay(10);

  // prepare GPIO2
  pinMode(2, OUTPUT);
  digitalWrite(2, 0);
  
  // Connect to WiFi network
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  
  // Start the server
  server.begin();
  Serial.println("Server started");

  // Print the IP address
  Serial.println(WiFi.localIP());
}

//--------------------------------Defining global variables for clients ---------------------------------------------------------------------------------------------
 double degit;
 int sep=0;
void loop() {
  delay(5000);
  //-------------------------------------------------------------------PICO W section -----------------------------------------------------------------------------------
  // Check if a client has connected
  if (sep ==0){
  WiFiClient client = server.available();
  if (!client) {
    Serial.println("no client advailable");
    return;
  }
  
  // Wait until the client sends some data
  Serial.println("new client");
  while(!client.available()){
    delay(1);
  }
  
  // Read the first line of the request
  String req = client.readStringUntil('\r');
  Serial.println("reqValue");
  Serial.println(req);
  Serial.println("End of req value");
  int ln = req.length();
  Serial.println("length");
  Serial.println(ln);
  int indH; //index of H from my HTTP post request from my client
  for(int i=0;i<=ln;i++){ //this gets me the index of H in my HTTP request from client
    if(req[i] == 'H'){
      indH = i;
      }
    }
  int indR = indH - 7; //getting the length of the data from the client
  char result[indR]; //initializing an array of the length of that data
  //char result[indR];
  Serial.println("Index of H");
  Serial.println(indH);
  for(int i=6;i<=indH-1;i++){ //I try to get the value of the data section of the HTTP request
    result[i-6] = req[i];
    }
  //result[indR]="/0";
  Serial.println("value of result");
  for(int i=0;i<=indR;i++){
    Serial.print(result[i]);
    }
  Serial.println("");
  degit=atof(result);
  Serial.println("Value of result int");
  Serial.println(degit,4);
  client.flush();
  client.stop();
  sep = 1;
  }
  //------------------------------------------------Pushing box version-----------------------------------------------------------------
  if(sep == 1){
    if(degit>0.02){
  Serial.print("connecting to ");
  Serial.println(host);

  // Use WiFiClient class to create TCP connections
  WiFiClient client;
  const int httpPort = 80;
  if (!client.connect(host, httpPort)) {
      Serial.println("connection failed");
      return;
  }

  // We now create a URI for the request
  String url = "/pushingbox";
  url += "?devid=";
  url += devid;
  
  Serial.print("Requesting URL: ");
  Serial.println(url);

  // This will send the request to the server
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "Connection: close\r\n\r\n");
  unsigned long timeout = millis();
  while (client.available() == 0) {
      if (millis() - timeout > 5000) {
          Serial.println(">>> Client Timeout !");
          client.stop();
          return;
      }
  }

  // Read all the lines of the reply from server and print them to Serial
  while(client.available()) {
      String line = client.readStringUntil('\r');
      Serial.print(line);
  }

  Serial.println();
  Serial.println("closing connection");
  }else{Serial.println("Threshold not met");}}
 sep = 0;
  
}
